# coding: utf-8
{{>partial_header}}
from __future__ import absolute_import

try:
    from enum import Enum, EnumMeta
except ImportError:
    from enum34 import Enum, EnumMeta
import click
import decorator
from functools import wraps

from {{packageName}} import *


class State(object):
    def __init__(self, api=None, format=None, {{# cliPathParams}}{{paramName}}=None{{#hasMore}}, {{/hasMore }}{{/cliPathParams}}):
        self.api = api
        self.format = format
{{# cliPathParams}}
        self.{{paramName}} = {{paramName}}
{{/cliPathParams}}


pass_state = click.make_pass_decorator(State)



def get_or_push(fun):
    @pass_state
    @click.pass_context
    @wraps(fun)
    def decorated(click_context, state, *args, **kwargs):
        for attr in kwargs:
            setattr(state, attr, kwargs[attr])
        try:
            current_obj = fun(*args, **kwargs)
        except:
            current_obj = fun(state, *args, **kwargs)
        if click_context.invoked_subcommand is None:
            print(current_obj)
        else:
            click_context.obj = current_obj

    return decorated


def object_print(fun):
    def object_print_decorator(fun, *args, **kwargs):
        obj = fun(*args, **kwargs)
        print(obj)

    return decorator.decorate(fun, object_print_decorator)


def add_typed_subcommands(type_):
    def add_fun(fun, attribute_name):
        @fun.command(name=attribute_name)
        @click.make_pass_decorator(type_)
        def type_cmd(obj):
            print(getattr(obj, attribute_name))

    def decorator(fun):
        for attribute_name, attribute_type in type_.openapi_types.items():
            add_fun(fun, attribute_name)

        setattr(fun, 'invoke_without_command', True)

        return fun

    return decorator



@click.group()
@click.pass_context
def main(ctx):
    configuration = Configuration()
    ctx.obj = State(format=format, api={{classname}}(configuration))


{{# cliCommands }}
# {{ this }}
    {{# name }}
    {{# operation }}
        {{#returnType}}
            {{^returnTypeIsPrimitive}}
                {{^ isListContainer }}
@add_typed_subcommands({{returnType}})
                {{/ isListContainer }}
            {{/returnTypeIsPrimitive}}
        {{/returnType}}
    {{/operation}}
    {{# isGroup }}
@{{{parent.fullName}}}.group(name="{{ cliName }}")
@get_or_push
    {{/ isGroup }}
    {{^ isGroup }}
@{{{parent.fullName}}}.command(name="{{ cliName }}")
@object_print
    {{/ isGroup }}
    {{# operation }}
        {{# queryParams }}
            {{# isPrimitiveType }}
@click.option("--{{paramName}}", type={{dataType}})
            {{/ isPrimitiveType }}
            {{^ isPrimitiveType }}
# complex type argument {{ dataType }}
            {{/ isPrimitiveType }}
        {{/ queryParams }}
@pass_state
    {{/operation}}
def {{fullName}}(state, {{#queryParams}}{{paramName}}{{#hasMore}}, {{/hasMore }}{{/queryParams}}):  # noqa: E501
    # {{httpMethod}} {{path}}
    return state.api.{{operationIdLowerCase}}({{#queryParams}}{{paramName}}{{#hasMore}}, {{/hasMore }}{{/queryParams}})



    {{/name}}
{{/ cliCommands }}
if __name__ == '__main__':
    main()